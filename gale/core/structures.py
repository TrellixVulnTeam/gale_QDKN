# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00a_core.structures.ipynb (unless otherwise specified).

__all__ = ['ACTIVATION_REGISTRY', 'IMAGE_CLASSIFICATION_TRANSFORMS', 'IMAGE_CLASSIFIER_BACKBONES',
           'IMAGE_CLASSIFIER_HEADS', 'META_ARCH_REGISTRY', 'OPTIM_REGISTRY', 'SCHEDULER_REGISTRY', 'DatasetCatalog']

# Cell
from collections import UserDict
from typing import List

from fvcore.common.registry import Registry

# Cell
Registry.__doc__ = """
The registry that provides `name -> object mapping`, to support third-party users' custom modules.
"""
Registry.register.__doc__ = """
Register the given object under the the name `obj.__name__`. Can also be used a `decorator`.
"""
Registry.get.__doc__ = "Retrive an object from the Registry"

# Cell
ACTIVATION_REGISTRY = Registry("Activations")
ACTIVATION_REGISTRY.__doc__ = "Registry of `Activation` functions"

# Cell
IMAGE_CLASSIFICATION_TRANSFORMS = Registry("Image Classification Transforms")
IMAGE_CLASSIFICATION_TRANSFORMS.__doc__ = """
Registry of transformations, for Image Classification. Transformations are used to preprocess the `Images`.
"""

# Cell
IMAGE_CLASSIFIER_BACKBONES = Registry("Image Classification Backbones")
IMAGE_CLASSIFIER_BACKBONES.__doc__ = """
Registry for Backbones used in Image Classification.
"""

# Cell
IMAGE_CLASSIFIER_HEADS = Registry("Image Classification Heads")
IMAGE_CLASSIFIER_HEADS.__doc__ = """
Registry for Classification heads in a `Gale` model.
Heads take feature maps and returns predictions.
"""

# Cell
META_ARCH_REGISTRY = Registry("Model Architectures")
META_ARCH_REGISTRY.__doc__ = """
Registry for meta-architectures, i.e. the whole model.
The registered object will be called with `cfg`
and expected to return a `nn.Module` object.
"""

# Cell
OPTIM_REGISTRY = Registry("Optimizers")
OPTIM_REGISTRY.__doc__ = """
Registry for `optimizers`. Should be a subclass
of `torch.optim.Optimizer`
"""

# Cell
SCHEDULER_REGISTRY = Registry("LRSchedulers")
SCHEDULER_REGISTRY.__doc__ = """
Registry for `lr_schedulers`. Should be a subclass
of `torch.optim.lr_scheduler._LRScheduler`
"""

# Cell
# export
class _DatasetCatalog(UserDict):
    """
    A global dictionary that stores information about the datasets and how to obtain them.
    It contains a mapping from strings
    (which are names that identify a dataset, e.g. `coco_2014_train`)
    to a function which parses the dataset and returns the samples in the
    format of `list[dict]`.

    The purpose of having this catalog is to make it easy to choose
    different datasets, by just using the strings in the config.
    """

    def register(self, name, func):
        """
        Arguments:
        * `name` (str): the name that identifies a dataset, e.g. `coco_2014_train`.
        * `func` (callable): a callable which takes no arguments and returns a list of dicts. It must return the same results if called multiple times.
        """
        assert callable(
            func
        ), "You must register a function with `DatasetCatalog.register`!"
        assert name not in self, "Dataset '{}' is already registered!".format(name)
        self[name] = func

    def get(self, name, **kwargs):
        """
        Call the registered function and return its results.

        Arguments:
        * `name` (str): the name that identifies a dataset, e.g. `coco_2014_train`.

        Returns:
        * `list[dict]`: dataset annotations.
        """
        try:
            f = self[name]
        except KeyError as e:
            raise KeyError(
                "Dataset '{}' is not registered! Available datasets are: {}".format(
                    name, ", ".join(list(self.keys()))
                )
            ) from e
        return f(**kwargs)

    def list(self) -> List[str]:
        """
        List all registered datasets.


        Returns:
            `list[str]`
        """
        return list(self.keys())

    def remove(self, name):
        """
        Alias of ``pop``.
        """
        self.pop(name)

    def __str__(self):
        return "DatasetCatalog(registered datasets: {})".format(", ".join(self.keys()))

    __repr__ = __str__

# Cell
DatasetCatalog = _DatasetCatalog()