# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00a_core.utils.visualize.ipynb (unless otherwise specified).

__all__ = ['subplots', 'show_image', 'show_titled_image', 'show_images', 'imshow_tensors']

# Cell
import math

import matplotlib.pyplot as plt
import numpy as np
from fastcore.all import delegates, hasattrs, ifnone
from numpy import array
from torchvision.utils import make_grid

# Cell
@delegates(plt.subplots, keep=True)
def subplots(nrows=1, ncols=1, figsize=None, imsize=3, suptitle=None, **kwargs):
    "Create subplots"
    if figsize is None:
        h = nrows * imsize if suptitle is None or imsize > 2 else nrows * imsize + 0.6
        figsize = (ncols * imsize, h)
    fig, ax = plt.subplots(nrows, ncols, figsize=figsize, **kwargs)
    if suptitle is not None:
        fig.suptitle(suptitle)
    if nrows * ncols == 1:
        ax = array([ax])
    return fig, ax

# Cell
def _fig_bounds(x):
    r = x // 32
    return min(5, max(1, r))

# Cell
@delegates(plt.Axes.imshow, keep=True, but=["shape", "imlim"])
def show_image(im, ax=None, figsize=None, title=None, ctx=None, **kwargs):
    "Show a PIL or PyTorch image on `ax`."
    # Handle pytorch axis order
    if hasattrs(im, ("data", "cpu", "permute")):
        im = im.data.cpu()
        if im.shape[0] < 5:
            im = im.permute(1, 2, 0)
    elif not isinstance(im, np.ndarray):
        im = array(im)
    # Handle 1-channel images
    if im.shape[-1] == 1:
        im = im[..., 0]

    ax = ifnone(ax, ctx)
    if figsize is None:
        figsize = (_fig_bounds(im.shape[0]), _fig_bounds(im.shape[1]))
    if ax is None:
        _, ax = plt.subplots(figsize=figsize)
    ax.imshow(im, **kwargs)
    if title is not None:
        ax.set_title(title)
    ax.axis("off")
    return ax

# Cell
@delegates(show_image, keep=True)
def show_titled_image(o, **kwargs):
    "Call `show_image` destructuring `o` to `(img,title)`"
    show_image(o[0], title=str(o[1]), **kwargs)

# Cell
@delegates(subplots)
def show_images(ims, nrows=1, ncols=None, titles=None, **kwargs):
    "Show all images `ims` as subplots with `rows` using `titles`."
    if ncols is None:
        ncols = int(math.ceil(len(ims) / nrows))
    if titles is None:
        titles = [None] * len(ims)
    axs = subplots(nrows, ncols, **kwargs)[1].flat
    for im, t, ax in zip(ims, titles, axs):
        show_image(im, ax=ax, title=t)

# Cell
@delegates(make_grid)
def imshow_tensors(inp, title=None, **kwargs):
    """Imshow for Tensor and optionally add a `title`. """
    grid = make_grid(inp, **kwargs)
    grid = grid.permute(1, 2, 0).data.numpy()
    plt.imshow(grid)

    if title is not None:
        plt.title(title)

    plt.pause(0.001)