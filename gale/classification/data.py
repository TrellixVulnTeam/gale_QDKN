# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05b_classification.data.ipynb (unless otherwise specified).

__all__ = ['register_torchvision_dataset', 'register_dataset_from_folders', 'register_dataset_from_df',
           'build_classification_loader_from_config']

# Cell
import logging
import pydoc
from typing import *

import pandas as pd
from fastcore.all import delegates, ifnone
from hydra.utils import instantiate
from omegaconf import DictConfig, OmegaConf
from torch.utils.data import DataLoader, Dataset

from .core import *
from ..torch_utils import worker_init_fn
from ..utils.structures import DatasetCatalog

_logger = logging.getLogger(__name__)

# Cell
@delegates(ClassificationMapper)
def register_torchvision_dataset(
    name: str,
    dataset: Dataset,
    mapper: Optional[Union[ClassificationMapper, Callable]] = None,
    **kwargs
):
    """
    Register a dataset in gale `DatasetCatalog` from a
    existing torchvision dataset. You can pass in `augmentations` to
    specify the transformations you want to apply to the Images
    in the dataset. Optionaly, `mapper` can also be passed in or else
    the default `ClassificationMapper` will be used to map the dataset in
    gale `ClassificationDataset` format.

    `name` is a `str` that identifies a dataset, e.g. "coco_2014_train".
    """
    mapper = ifnone(mapper, ClassificationMapper(**kwargs))

    DatasetCatalog.register(
        name, lambda: ClassificationDataset(mapper=mapper, parser=dataset)
    )
    _logger.info("Dataset: {} registerd to DatasetCatalog".format(name))

# Cell
@delegates(ClassificationMapper)
def register_dataset_from_folders(
    name: str,
    image_root: str,
    class_map: Optional[str] = " ",
    mapper: Optional[Union[ClassificationMapper, Callable]] = None,
    **kwargs
):
    """
    Register a dataset present in folders (see `FolderParser`) to DatasetCatalog.
    `name` is a `str` that identifies a dataset, e.g. "coco_2014_train".
    """
    parser = FolderParser(root=image_root, class_map="")
    mapper = ifnone(mapper, ClassificationMapper(**kwargs))
    DatasetCatalog.register(
        name, lambda: ClassificationDataset(mapper=mapper, parser=parser)
    )
    _logger.info("Dataset: {} registerd to DatasetCatalog".format(name))

# Cell
@delegates(ClassificationMapper)
def register_dataset_from_df(
    name: str,
    df: pd.DataFrame,
    path_column: str,
    label_column: str,
    class_map: Optional[str] = " ",
    mapper: Optional[Union[ClassificationMapper, Callable]] = None,
    **kwargs
):
    """
    Register a dataset present in a pandas dataframe (see `PandasParser`) to DatasetCatalog.
    `name` is a `str` that identifies a dataset, e.g. "coco_2014_train".
    """
    parser = PandasParser(df, path_column, label_column)
    mapper = ifnone(mapper, ClassificationMapper(**kwargs))
    DatasetCatalog.register(
        name, lambda: ClassificationDataset(mapper=mapper, parser=parser)
    )

    _logger.info("Dataset: {} registerd to DatasetCatalog".format(name))

# Cell
def build_classification_loader_from_config(name: str, config: DictConfig):
    """
    Build DataLoader from gale config using a dataset registerd in
    DatasetCatalog identified by `name`.

    Arguments:
    1. name (str): represents the name of the registerd dataset.
    2. config (DictConfig): gale config for a dataloader.
    """
    _logger.debug("Creating Loader for {} dataset".format(name))

    dataset = DatasetCatalog.get(name)

    _logger.debug("Found {} instances in the dataset".format(len(dataset)))

    conf = OmegaConf.to_container(config, resolve=True)

    if conf["num_workers"] > 0:
        conf["worker_init_fn"] = worker_init_fn

    if conf["sampler"] is not None:
        conf["sampler"] = instantiate(conf["sampler"])
        _logger.info("Using sampler {}".format(conf["sampler"].__class__.__name__))

    if conf["collate_fn"] is not None:
        conf["collate_fn"] = pydoc.locate(conf["collate_fn"])
        _logger.info("Using collate_fn {}".format(conf["collate_fn"]))

    loader = DataLoader(dataset, **conf)
    return loader